# Business Logic & User Stories Flow

## 1. WORKSPACE MANAGEMENT (Multi-Tenancy)

### User Story 1.1: Create Workspace
**As a** new user  
**I want to** create a workspace  
**So that** I can manage my organization's projects

**Flow:**
1. User signs up → Create User account
2. User creates workspace → Create Workspace with user as owner
3. System generates unique slug for workspace
4. User is automatically added as workspace member with 'owner' role
5. Default settings are applied (subscription: free, status: active)

### User Story 1.2: Invite Members to Workspace
**As a** workspace owner/admin  
**I want to** invite team members  
**So that** they can collaborate on projects

**Flow:**
1. Owner sends invitation with email and role (admin/member)
2. System creates Notification for invited user
3. User accepts invitation
4. User is added to workspace.members array
5. Activity log records "member.added" action

### User Story 1.3: Manage Workspace Settings
**As a** workspace owner  
**I want to** configure workspace settings  
**So that** I can control default behaviors

**Flow:**
1. Update workspace settings (privacy, task prefix, etc.)
2. Log activity for settings change
3. Apply settings to new projects created

---

## 2. PROJECT MANAGEMENT

### User Story 2.1: Create Project
**As a** workspace member  
**I want to** create a project  
**So that** I can organize related tasks

**Flow:**
1. User creates project within workspace
2. System validates user is workspace member
3. Generate unique project key (e.g., "PROJ", "DEV")
4. Set user as project owner
5. Automatically add creator to project.team array
6. Initialize progress metrics (0 tasks, 0% complete)
7. Create Activity log entry "project.created"
8. Send Notification to relevant workspace members

### User Story 2.2: Add Team Members to Project
**As a** project owner/lead  
**I want to** add team members  
**So that** they can work on project tasks

**Flow:**
1. Validate users are workspace members
2. Add users to project.team with role (lead/member/viewer)
3. Create Activity log "member.added"
4. Send Notification to added users
5. Update user workload capacity

### User Story 2.3: Update Project Status
**As a** project owner  
**I want to** change project status  
**So that** I can track project lifecycle

**Flow:**
1. Update project.status (planning → active → on-hold → completed → archived)
2. If status = 'completed', set all incomplete tasks to 'done' or handle accordingly
3. If status = 'archived', set archivedAt timestamp
4. Create Activity log "project.updated"
5. Notify project team members

---

## 3. TASK MANAGEMENT

### User Story 3.1: Create Task
**As a** project member  
**I want to** create a task  
**So that** I can track work items

**Flow:**
1. Validate user is project team member
2. Auto-increment taskNumber (TASK-1, TASK-2, etc.)
3. Create Task with reporter = current user
4. Update project.progress.totalTasks
5. Create Activity log "task.created"
6. If assignees specified, send Notification to assignees
7. Calculate project completion percentage

### User Story 3.2: Assign Task to User
**As a** project member  
**I want to** assign tasks to team members  
**So that** work is distributed

**Flow:**
1. Validate assignees are project team members
2. Add users to task.assignees array
3. Update assigned users' workload.currentCapacity
4. Create Activity log "task.assigned"
5. Send Notification to newly assigned users (type: 'task_assigned')
6. Add assignees to task.watchers automatically

### User Story 3.3: Update Task Status
**As a** task assignee  
**I want to** update task status  
**So that** I can show progress

**Flow:**
1. Update task.status (todo → in-progress → in-review → done)
2. If status = 'done':
   - Set task.completedAt timestamp
   - Update project.progress.completedTasks
   - Update project.progress.percentage
   - Stop any running time entries
3. Create Activity log "task.status.changed"
4. Notify task watchers and project lead
5. Check if task has dependent tasks and notify them

### User Story 3.4: Add Task Dependencies
**As a** task owner  
**I want to** add dependencies  
**So that** I can manage task relationships

**Flow:**
1. Add dependency to task.dependencies with type (blocks/is-blocked-by/relates-to)
2. Validate no circular dependencies
3. Create Activity log
4. Notify dependent task assignees
5. Update task UI to show blocking status

### User Story 3.5: Create Subtask
**As a** task owner  
**I want to** break down complex tasks  
**So that** work is manageable

**Flow:**
1. Create new Task with parent = parentTaskId
2. Inherit project and workspace from parent
3. Auto-increment taskNumber
4. Link parent and child
5. Create Activity log
6. Parent task shows subtask progress

---

## 4. COLLABORATION

### User Story 4.1: Comment on Task
**As a** project member  
**I want to** comment on tasks  
**So that** I can discuss and provide updates

**Flow:**
1. Create Comment with task reference
2. Extract @mentions from content
3. Add mentioned users to comment.mentions
4. Send Notification to mentioned users (type: 'comment_mentioned')
5. Send Notification to task assignees and watchers
6. Create Activity log "comment.added"

### User Story 4.2: Reply to Comment
**As a** user  
**I want to** reply to comments  
**So that** I can have threaded discussions

**Flow:**
1. Create Comment with parent = parentCommentId
2. Process mentions and notifications
3. Notify original comment author
4. Create Activity log

### User Story 4.3: Add Reaction to Comment
**As a** user  
**I want to** react to comments  
**So that** I can quickly acknowledge

**Flow:**
1. Add reaction {emoji, user} to comment.reactions
2. Notify comment author (optional)
3. Update comment in real-time

---

## 5. TIME TRACKING

### User Story 5.1: Start Timer
**As a** task assignee  
**I want to** track time spent  
**So that** I can log work hours

**Flow:**
1. Create TimeEntry with:
   - startTime = now
   - isRunning = true
   - duration = 0
2. Check if user has other running timers → stop them
3. Link to task and project
4. Update UI to show running timer

### User Story 5.2: Stop Timer
**As a** task assignee  
**I want to** stop the timer  
**So that** I can record completed work

**Flow:**
1. Find running TimeEntry for user
2. Set endTime = now
3. Calculate duration = endTime - startTime (in minutes/hours)
4. Set isRunning = false
5. Update task.timeline.actualHours
6. If billable, calculate cost = duration * hourlyRate
7. Create Activity log

### User Story 5.3: Manual Time Entry
**As a** user  
**I want to** add time entries manually  
**So that** I can log past work

**Flow:**
1. Create TimeEntry with specified startTime, endTime
2. Calculate duration
3. Validate times don't overlap with existing entries
4. Update task actual hours
5. Create Activity log

---

## 6. SPRINT MANAGEMENT (Agile)

### User Story 6.1: Create Sprint
**As a** project lead  
**I want to** create a sprint  
**So that** I can organize work in iterations

**Flow:**
1. Create Sprint with date range
2. Set status = 'planning'
3. Initialize velocity metrics
4. Create Activity log

### User Story 6.2: Add Tasks to Sprint
**As a** project member  
**I want to** add tasks to sprint  
**So that** I can plan iteration work

**Flow:**
1. Add task IDs to sprint.tasks array
2. Update task references to include sprint
3. Calculate planned velocity (sum of estimates)
4. Update sprint board view

### User Story 6.3: Start Sprint
**As a** project lead  
**I want to** activate sprint  
**So that** team can begin work

**Flow:**
1. Update sprint.status = 'active'
2. Notify all sprint task assignees
3. Create Activity log
4. Lock sprint tasks (no new tasks added)

### User Story 6.4: Complete Sprint
**As a** project lead  
**I want to** complete sprint  
**So that** I can review and plan next iteration

**Flow:**
1. Calculate completed velocity (sum of done tasks)
2. Move incomplete tasks to backlog or next sprint
3. Update sprint.status = 'completed'
4. Generate sprint report
5. Create Activity log

---

## 7. NOTIFICATIONS & ACTIVITY

### User Story 7.1: Receive Real-time Notifications
**As a** user  
**I want to** receive notifications  
**So that** I stay updated on relevant changes

**Flow:**
1. System creates Notification on trigger events:
   - Task assigned
   - Task mentioned in comment
   - Task due soon (24 hours before)
   - Task overdue
   - Status/priority changed
2. Check user.preferences.notifications settings
3. Send via enabled channels (email, push, in-app)
4. Store in Notification collection
5. Mark as unread

### User Story 7.2: View Activity Log
**As a** user  
**I want to** see activity history  
**So that** I can track changes

**Flow:**
1. Query Activity collection filtered by:
   - Workspace/Project/Task
   - Date range
   - Action type
2. Populate user references
3. Display chronological feed
4. Activities auto-delete after 90 days (TTL index)

---

## 8. ADVANCED FEATURES

### User Story 8.1: Task Dependencies & Blocking
**As a** user  
**I want to** see blocking tasks  
**So that** I know what's preventing progress

**Flow:**
1. Query task.dependencies
2. Check status of blocking tasks
3. If blocker is not done → show warning
4. Prevent status change if hard-blocked (optional)
5. Notify when blocker is completed

### User Story 8.2: Workload Management
**As a** manager  
**I want to** see team workload  
**So that** I can balance assignments

**Flow:**
1. Query users in workspace/project
2. Calculate currentCapacity from assigned tasks
3. Sum estimated hours of active tasks
4. Compare to maxCapacity
5. Display capacity chart
6. Warn on over-allocation

### User Story 8.3: Custom Fields
**As a** admin  
**I want to** add custom fields  
**So that** I can track specific metrics

**Flow:**
1. Define custom field (name, type, options)
2. Add to project.customFields or task.customFields
3. Validate values based on type
4. Include in reports and filters

### User Story 8.4: Bulk Operations
**As a** user  
**I want to** perform bulk actions  
**So that** I can be efficient

**Flow:**
1. Select multiple tasks
2. Choose action (assign, change status, move to project)
3. Validate permissions for each task
4. Execute operations in transaction
5. Create Activity logs for each
6. Send consolidated notifications

---

## 9. REPORTING & ANALYTICS

### User Story 9.1: Project Progress Report
**As a** manager  
**I want to** view project metrics  
**So that** I can track performance

**Flow:**
1. Calculate metrics:
   - Completion rate (completed/total tasks)
   - Burndown (tasks remaining over time)
   - Velocity (completed story points per sprint)
   - Budget usage (spent/allocated)
2. Query Activity logs for trend data
3. Generate charts
4. Export report

### User Story 9.2: Time Reports
**As a** manager  
**I want to** view time reports  
**So that** I can track billable hours

**Flow:**
1. Query TimeEntry collection
2. Filter by user, project, date range
3. Calculate totals:
   - Total hours
   - Billable hours
   - Cost (hourly rate * hours)
4. Group by user/project/task
5. Export for invoicing

---

## 10. PERMISSIONS & SECURITY

### User Story 10.1: Role-based Access
**As a** system  
**I want to** enforce permissions  
**So that** data is secure

**Flow:**
1. Check user role at workspace level
2. Check user role at project level
3. Validate action permissions:
   - Owner: full access
   - Admin: manage projects/members
   - Member: create tasks, update assigned tasks
   - Viewer: read-only
4. Return 403 if unauthorized

### User Story 10.2: Private Projects
**As a** user  
**I want to** create private projects  
**So that** I can control visibility

**Flow:**
1. Set project.privacy = 'private'
2. Only project.team members can view
3. Filter project lists by user membership
4. Hide from workspace-wide searches

---

## CRITICAL BUSINESS RULES

1. **User must be workspace member** to access any workspace data
2. **User must be project team member** to access project/tasks
3. **Task numbers are unique per workspace** and auto-increment
4. **Cannot delete workspace** if it has active projects
5. **Cannot remove user** if they have assigned tasks
6. **Task due date notifications** sent 24 hours before
7. **Overdue tasks** checked daily via cron job
8. **Activity logs** auto-delete after 90 days
9. **Time entries** cannot overlap for same user
10. **Sprints** cannot overlap dates for same project